<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[各类奇葩模板]]></title>
    <url>%2F2018%2F12%2F18%2F%E5%90%84%E7%B1%BB%E5%A5%87%E8%91%A9%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[各类模子,希望各位dalao赞助(￣▽￣)~*(｀・ω・´)以下为各类模板(持续更新) 快速幂1234567int qpow(long long x,long long y)&#123; if(y==1)return x%c; long long t=qpow(x,y/2); if(y%2&gt;0)return t*t*x%c; else return t*t%c;&#125; 并查集123456789101112131415161718192021222324252627282930int root(int x)//找根 &#123; if(p[x]&lt;0)return x;//如果找到根了 return p[x]=root(p[x]);//非常精巧边找根边将自己设为根的儿子 &#125;void Merge(int x,int y)//将x的和y合并 &#123; int u=root(x);//追溯到x的根 int v=root(y);//追溯到y的根 if(u!=v)//如果两人的根不相等 &#123; if(u&lt;v) &#123; p[u]=p[u]+p[v]; p[v]=u; &#125; else &#123; p[v]=p[v]+p[u]; p[u]=v; &#125; &#125; &#125;bool findg(int x,int y)//如果x和y属于同一个图 &#123; int u=root(x);//追溯到x的根 int v=root(y);//追溯到y的根 if(u==v)return true;//如果x和y属于同一个图 else return false;//否则返回不为同一个根 &#125;]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[“杂谈系列-杂谈并查集”]]></title>
    <url>%2F2018%2F12%2F17%2F%E2%80%9C%E6%9D%82%E8%B0%88%E7%B3%BB%E5%88%97-%E6%9D%82%E8%B0%88%E5%B9%B6%E6%9F%A5%E9%9B%86%E2%80%9D%2F</url>
    <content type="text"><![CDATA[Hi,这里是被dalao灭掉的smallfang. 今天蒟蒻smallfang就来谈一谈并查集… 在这个信息多么发达的社会我们就应该上网查一查并查集是些什么: （以下来自度娘百科） 概念并查集，在一些有N个元素的集合应用问题中，我们通常是在开始时让每个元素构成一个单元素的集合，然后按一定顺序将属于同一组的元素所在的集合合并，其间要反复查找一个元素在哪个集合中。这一类问题近几年来反复出现在信息学的国际国内赛题中，其特点是看似并不复杂，但数据量极大，若用正常的数据结构来描述的话，往往在空间上过大，计算机无法承受；即使在空间上勉强通过，运行的时间复杂度也极高，根本就不可能在比赛规定的运行时间（1～3秒）内计算出试题需要的结果，只能用并查集来描述。其中粗体字要注意.因为比较重要… 上面的内容大概意思是不使用并查集会超时的题必须使用并查集否则解决不了 例题裸体（模板） 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;iostream&gt;//基础头文件#include &lt;cstring&gt;//memesetusing namespace std;int p[200001];//邻接表 int root(int x)//找根 &#123; if(p[x]&lt;0)return x;//如果找到根了 return p[x]=root(p[x]);//非常精巧边找根边将自己设为根的儿子 &#125;void Merge(int x,int y)//将x的和y合并 &#123; int u=root(x);//追溯到x的根 int v=root(y);//追溯到y的根 if(u!=v)//如果两人的根不相等 &#123; if(u&lt;v) &#123; p[u]=p[u]+p[v]; p[v]=u; &#125; else &#123; p[v]=p[v]+p[u]; p[u]=v; &#125; &#125; &#125;bool findg(int x,int y)//如果x和y属于同一个图 &#123; int u=root(x);//追溯到x的根 int v=root(y);//追溯到y的根 if(u==v)return true;//如果x和y属于同一个图 else return false;//否则返回不为同一个根 &#125;int main()&#123; memset(p,-1,400004);//-1代表是大哥(根) int n,m; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=m;i++) &#123; int z,x,y; cin&gt;&gt;z&gt;&gt;x&gt;&gt;y; if(z==2) &#123; if(findg(x,y))cout&lt;&lt;"Y"; else cout&lt;&lt;"N"; cout&lt;&lt;endl; &#125; if(z==1) &#123; Merge(x,y);//拼接x,y; &#125; &#125; return 0; &#125; 推荐题目 这里除了第一题之外的所有题全部可以按顺序做 the end]]></content>
      <tags>
        <tag>杂谈</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-P1111-修复公路]]></title>
    <url>%2F2018%2F12%2F16%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1111-%E4%BF%AE%E5%A4%8D%E5%85%AC%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[天啊撸，又双叒叕的来的还是我… LG-1111-修复公路&gt;_&lt;学完并查集大水题aua 题目描述思路并查集…. 题目大意一个图之间断开了，现在给你n,m.然后有m组,每组有x,y,t,x与y之间如果连接的话需要t分钟，问联通需要几分钟. 结构体先以时间从小到大排序,可以写一个结构体类似于….这样12345struct pef&#123; int x; int y; int m;&#125;; 然后其中x代表x,y代表y,m代表时间; sort判断函数1234bool cmp(pef x,pef y)&#123; return x.m&lt;y.m;&#125; 检查是否图为联通12345678910bool check()&#123; int t=0; for(int i=1;i&lt;=n;i++) &#123; if(p[i]&lt;0)t++; &#125; if(t==1)return true; else return false;&#125; 找到自己的祖宗…12345int root(int x)&#123; if(p[x]&lt;0)return x; return p[x]=root(p[x]);&#125; 并查集-并123456789101112131415161718void Merge(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v) &#123; if(u&lt;v) &#123; p[u]=p[u]+p[v]; p[v]=u; &#125; else &#123; p[v]=p[v]+p[u]; p[u]=v; &#125; &#125;&#125; 判断两人的祖宗是否相等1234567bool is(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v)return false; else return true;&#125; !有一点一定要注意… 那就是输出的是修路的最长的时间… 以上就是全部的思路,main中的代码.123456789101112131415161718192021222324main()&#123; 设p数组为-1; 输入n,m; 从1-m循环 &#123; 输入x,y,z; &#125; 从a+1-a+1+n以cmp函数规则排序; 从1-m循环 &#123; 如果(a[i].x与a[i].y为不同一祖宗(!is(a[i],x,a[i],y)) &#123; 合并(a[i].x,a[i].y); &#125; 如果(图已联通) &#123; 输出 最高时间; 退出程序; &#125; &#125; 输出 -1; 退出;&#125; 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/*╭──╮╭╭╮╮╭──╮╭╮ ╭╮ ╭──╮╭──╮╭╮╭╮╭──╮│╭─╯│ ││╭╮│││ ││ │╭─╯│╭╮││╰╮││╭─╯│╰─╮│││││╰╯│││ ││ │╰─╮│╰╯││ │││╭╮╰─╮││╭╮││╭╮│││ ││ │╭─╯│╭╮││ │││││╭─╯││││││││││╰─╮│╰─╮││ │││││╰╮││╰╯│╰──╯╰╯╰╯╰╯╰╯╰──╯╰──╯╰╯ ╰╯╰╯╰╯╰╯╰──╯*/#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;struct pef&#123; int x; int y; int m;&#125;;int p[100001];int root(int x)&#123; if(p[x]&lt;0)return x; return p[x]=root(p[x]);&#125;int n,m,ans=0;void Merge(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v) &#123; if(u&lt;v) &#123; p[u]=p[u]+p[v]; p[v]=u; &#125; else &#123; p[v]=p[v]+p[u]; p[u]=v; &#125; &#125;&#125;bool is(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v)return false; else return true;&#125;bool check()&#123; int t=0; for(int i=1;i&lt;=n;i++) &#123; if(p[i]&lt;0)t++; &#125; if(t==1)return true; else return false;&#125;pef a[100001];bool cmp(pef x,pef y)&#123; return x.m&lt;y.m;&#125;int main()&#123; memset(p,-1,400004); cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=m;i++) &#123; cin&gt;&gt;a[i].x&gt;&gt;a[i].y&gt;&gt;a[i].m; &#125; sort(a+1,a+1+m,cmp); for(int i=1;i&lt;=m;i++) &#123; int xa=a[i].x,ya=a[i].y; int money=a[i].m; if(!is(xa,ya)) &#123; ans=ans+money; Merge(xa,ya); &#125; if(check()) &#123; cout&lt;&lt;money; return 0; &#125; &#125; cout&lt;&lt;"-1";&#125;&#125; 此题可以顺带手撸掉模板最小生成树…bye~]]></content>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-P2058-海港]]></title>
    <url>%2F2018%2F12%2F14%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P2058-%E6%B5%B7%E6%B8%AF%2F</url>
    <content type="text"><![CDATA[LG - P2058 - 海港 题目这里 思路部分这道题乍一看是一道大难题大模拟 1 维护一个队列(不使用库函数) 叫做dl dl[i].ti意思是第i个人在什么时候到达 dl[i].ni意思是第i个人的国籍 2 输入国籍，定义pep,统计该国籍有没有人，如果没有那么ans++,并且pep[tmp]++; 3 由于给定条件保证数据递增,所以就保证此时的队列是一个单调递增的。然后定义e=0,这样从队头扫到元素时间与该此到达时间差小于86400（不等于）如果不满足则e++并且删掉一个改国籍的人,如果该国籍此时没有人那么ans–; 代码部分12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;using namespace std;struct node&#123; int ti,na;&#125;dl[400000];int ans=0;int pep[400000];int main()&#123; int n; cin&gt;&gt;n; int t,k,c=0; int e=1; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;t&gt;&gt;k; int tmp; for(int i=k;i&gt;=1;i--) &#123; cin&gt;&gt;tmp; dl[c+1].ti=t; dl[++c].na=tmp; if(!pep[tmp]) &#123; ans++; &#125; pep[tmp]++; &#125; while(t-dl[e].ti&gt;=86400) &#123; if(!--pep[dl[e++].na]) ans--; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; 题解终于写完了]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flag?]]></title>
    <url>%2F2018%2F12%2F09%2Fflag%2F</url>
    <content type="text"><![CDATA[11.推出v0.3 未达成2.Ac 200道题 √ ff]]></content>
      <tags>
        <tag>flag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客更新说明]]></title>
    <url>%2F2018%2F12%2F08%2F%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[V0.2.0 (+)博客评论功能 (+)站内搜索功能 (+)背景样式 (+)增加加载条V0.1.0 2018.12.16 基础]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-AT2281-Sum of Three Integers]]></title>
    <url>%2F2018%2F12%2F06%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-AT2281-Sum-of-Three-Integers%2F</url>
    <content type="text"><![CDATA[1234 嘿嘿嘿,做红题的感觉真不错 题目大意这道题就是求a+b+c=s有几种等式成立的可能性 0&lt;=a,b,c&lt;=k 给定s,k; 求出方案数. 思路暴力n^3对,看到是红题就认为暴力n^3能过，然后就凉了… 下面是代码 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;int main()&#123; int k,s; cin&gt;&gt;k&gt;&gt;s; int ans=0; for(int i=0;i&lt;=k;i++) &#123; for(int j=0;j&lt;=k;j++) &#123; for(int ij=0;ij&lt;=k;ij++) &#123; if(i+j+ij==s) &#123; ans++; &#125; &#125; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125; $n^2$算法em… 可以写两个循环求出第3个值。如果第三个值符合要求，则答案++,下面是AC代码 12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int main()&#123; int k,s; cin&gt;&gt;k&gt;&gt;s; int ans=0; for(int i=0;i&lt;=k;i++) &#123; for(int j=0;j&lt;=k;j++) &#123; int ij=s-i-j; if(ij&lt;=k &amp;&amp; ij &gt;=0)ans++; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOIP PJ 省一祭]]></title>
    <url>%2F2018%2F12%2F04%2FNOIP-PJ-%E7%9C%81%E4%B8%80%E7%A5%AD%2F</url>
    <content type="text"><![CDATA[1开心… NOIP 第一次参加就一等奖了198刚好蹭线 嘿嘿嘿]]></content>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[题解-NOIP2018T4对称二叉树]]></title>
    <url>%2F2018%2F12%2F01%2F%E9%A2%98%E8%A7%A3-NOIP2018T4%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[noip1=198…BJ蹭线 前言smallfang noip 考试失利所以得了198,感觉???? 题目应该都知道 代码12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#define ull unsigned long longusing namespace std;int ans=1,n,v[1000005],l[1000005],r[10000005]; struct node&#123; int d; int t; int w; node(int da,int ta,int tw) &#123; d=da; t=ta; w=tw; &#125; bool operator==(const node&amp;b)const&#123;return d==b.d&amp;&amp;w==b.w&amp;&amp;t==b.t;&#125;&#125;; ull id(int x,int *l1,int *r1,ull h)&#123;if(l1[x]&gt;0) h=id(l1[x],l1,r1,h*1009+1); if(r1[x]&gt;0) h=id(r1[x],l1,r1,h*1009+2);return h*1009+v[x];&#125;node dfs(int x)&#123; if(x&lt;0)return node(0,0,0); node ll=dfs(l[x]); node rr=dfs(r[x]); if(ll==rr&amp;&amp;l[x]&gt;0&amp;&amp;id(l[x],l,r,0)==id(r[x],r,l,0)) ans=max(ans,2*ll.t+1); return node(max(ll.d,rr.d)+1,ll.t+rr.t+1,ll.w+rr.w+v[x]);&#125;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++)cin&gt;&gt;v[i]; for(int i=1;i&lt;=n;i++)cin&gt;&gt;l[i]&gt;&gt;r[i]; dfs(1); cout&lt;&lt;ans; return 0; &#125;]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
</search>
