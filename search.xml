<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[指针]]></title>
    <url>%2F2019%2F05%2F01%2F%E6%8C%87%E9%92%88%2F</url>
    <content type="text"><![CDATA[前言… 终究是更新了 定义与赋值定义类型(int,char,bool…) * 变量名; 举个例子:1int *p=NULL; 实际上,指针变量p指向的是一个地址.NULL表示空. 赋值首先,先让我们举个例子. 1p=&amp;a; 其中 &amp; 代表 a 的地址,这句话的意义就是将p指向变量a. !注意! 变量a与*p的类型必须保证一致. 初始化12int a;int *p=&amp;a; 引用与运算引用下表为指针变量与普通变量对比表 指针变量 普通变量 p &amp;a *p a *p=5 a=5 运算+,-运算例题1 输入N个整数,使用指针变量访问输出. 12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int a[101],n;int main()&#123; int n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;a[i]; &#125; int *p=&amp;a[1]; for(int i=1;i&lt;=n;i++) &#123; cout&lt;&lt;*p&lt;&lt;" "; p++; &#125; return 0;&#125; 输入42 1 6 0 输出2 1 6 0 p++ 是用来指向下一个指针地址 p - - 是用来指向上一个指针地址 They are not same 补充无类型指针 指针与数组指针用作数组名关于动态数组1int *a=new int[n+1]; 代表我要申请多个变量空间,这也就是传说中的动态数组(其中一种). 动态数组的优点:在oi中,大数据可能超时空的情况是比较纠结的事,用小数组只能得部分分,大数据可能爆空间.使用动态数组,可以确保在确定小数据没问题的基础上,尽量满足大数据的需求. 我们可以将指针指向数组,然后我们可以使用指针代替数组。 指针与字符串字符串的表现形式在c++中我们可以使用两种方法访问指针 法1使用字符数组存放一个字符串，然后输出此字符串12char str[]="STRING";cout&lt;&lt;str; 法2用字符指针指向一个字符串,可以不定义字符数组而定一个字符指针.用字符指针指向字符串中的字符.12char * str="STRING";cout&lt;&lt;str; 字符串指针作函数参数将一个字符串从一个函数传递到另外一个函数,可以用地址传递的方法,即用字符数组名做参数或用指向字符的指针变量做参数，在被调用的函数中可以被改变字符串内容，在主调函数中可以得到得到改变了的字符串。 例题2 说有一个100长度zfc，知道基本的资格和成绩，也将作为奋斗组成为最心动的是重组后的字符串。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[蓝桥杯-T3]]></title>
    <url>%2F2019%2F04%2F01%2F%E8%93%9D%E6%A1%A5%E6%9D%AF-T3%2F</url>
    <content type="text"><![CDATA[最近,编程的状态在慢慢的回来…所以说可能会恢复博客不定期更新(t博客也会写的高产似那啥 (母猪) 前言第10届蓝桥杯c++组(dao)(shu)第1名非我莫属一共5道题,做了2道,真凉了下面是我赛后对T3重构代码,并且(ben)已(ji)经AC的题目 题目~ code12 啊…以后再来填坑。。。]]></content>
  </entry>
  <entry>
    <title><![CDATA[后效记忆深搜]]></title>
    <url>%2F2019%2F03%2F31%2F%E5%90%8E%E6%95%88%E8%AE%B0%E5%BF%86%E6%B7%B1%E6%90%9C%2F</url>
    <content type="text"><![CDATA[hello ! 这里是smallfang ! 前言有是很久没有更博客了,今天来分享一下记忆化深搜.希望大家喜欢.(4.3日来填坑) 关于后效记忆深搜… 也应该是老算法,只不过今天拿来分享分享. 简介百度即可~ 题目洛谷 最大食物链计数 code12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;iostream&gt;using namespace std;int r[6000];int c[6000];int f[6000];int p_t[550000];int next[550000];int t[550000];int co=0;void add(int x,int y)&#123; co++; p_t[co]=y; next[co]=t[x]; t[x]=co;&#125;int dfs(int x)&#123; if(!c[x])return 1; if(f[x])return f[x]; int sum=0; for(int i=t[x];i;i=next[i]) &#123; sum=(sum+dfs(p_t[i]))%80112002; &#125; f[x]=sum%80112002; return f[x];&#125;int main()&#123; int n,m; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=m;i++) &#123; int x,y; cin&gt;&gt;x&gt;&gt;y; c[x]++; r[y]++; add(x,y); &#125; int ans=0; for(int i=1;i&lt;=n;i++) if(!r[i])ans=(ans+dfs(i))%80112002; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拓扑排序,逻辑开关]]></title>
    <url>%2F2019%2F03%2F09%2F%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F-%E9%80%BB%E8%BE%91%E5%BC%80%E5%85%B3%2F</url>
    <content type="text"><![CDATA[是我,还没弃坑… 前言在正文开始之前,我先来宣传一下我们工作室,这里是工作室官网当然,在没备案之前就是得加个. 拓扑排序是的,这个名字很怪.我们可以找一个直观的名字去描述拓扑排序,这个名字叫做不包含强连通子图.类似于不能出现1是2的父亲,2是1的父亲(这是一个很奇葩的例子)那么这种含有强连通子图,那么就倒霉了,他就不叫拓扑图,那么就无法用来dp了(这个后面会说) 那么如果没有类似于强连通子图(连通图),那么就恭喜你,这道题就可以使用dp来进行解决了,如果你的dp不熟悉,那么也可以另找退路,类似于记忆化搜索解决(这个后面会说到). 拓扑作用如果你想使用dp解决在图中的题目,你必须保证此图是拓扑图. 如果无法保证该图是拓扑图,那么也要恭喜你,你排除了一个无法使用的算法. 大概,以上就是拓扑了.下面就是一座崭新的世界 逻辑开关首先,我先上一段代码:12345if(x&gt;5)&#123;ans=ans+x;&#125; 很简洁但是实际上看起来一点都不高大上,在下面,我提供一种简单的算法:12ans=ans+(x&gt;5)*x; 是的,我相信你已经看懂了. 以上是我归来的第一篇内容,也是一篇纪念,以后可以回来再复习,也希望给大家带来参考.2019.3.9]]></content>
  </entry>
  <entry>
    <title><![CDATA[家谱]]></title>
    <url>%2F2019%2F03%2F09%2F%E5%AE%B6%E8%B0%B1%2F</url>
    <content type="text"><![CDATA[blog … map是个好东西 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;map&gt;using namespace std;map&lt;string,string&gt;p;string searchav(string x)&#123; if(x!=p[x]) p[x]=searchav(p[x]); return p[x];&#125;int main()&#123; bool flag=false; for(;;) &#123; string x; char char_f; if(flag==false) cin&gt;&gt;char_f; if(char_f=='$') &#123; break; &#125; if(char_f=='#') &#123; cin&gt;&gt;x; string father=x; if(p[x]=="") p[x]=x; for(;;) &#123; cin&gt;&gt;char_f;flag=true; if(char_f!='+')break; else &#123; cin&gt;&gt;x; p[x]=father; flag=false; &#125; &#125; &#125; if(char_f=='?') &#123; cin&gt;&gt;x; flag=false; cout&lt;&lt;x&lt;&lt;" "&lt;&lt;searchav(x)&lt;&lt;endl; &#125; &#125; return 0; &#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[POJ-登山]]></title>
    <url>%2F2019%2F02%2F20%2FPOJ-%E7%99%BB%E5%B1%B1%2F</url>
    <content type="text"><![CDATA[#题目 在这里]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[元宵节快乐]]></title>
    <url>%2F2019%2F02%2F19%2F%E5%85%83%E5%AE%B5%E8%8A%82%E5%BF%AB%E4%B9%90%2F</url>
    <content type="text"><![CDATA[元宵节快乐 在这里祝大家元宵节快乐…几件事:1.春节特别版主题已经换过来了…(已经把特别版删了,够红了,唯一遗憾没截图)2.等元宵节过去了恢复更新3.谁要这个源代码加博主qq:468828374 The end]]></content>
  </entry>
  <entry>
    <title><![CDATA[更新来了]]></title>
    <url>%2F2019%2F01%2F31%2F%E6%9B%B4%E6%96%B0%E6%9D%A5%E4%BA%86%2F</url>
    <content type="text"><![CDATA[2333是来了….]]></content>
  </entry>
  <entry>
    <title><![CDATA[最长上升子序列]]></title>
    <url>%2F2019%2F01%2F24%2F%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[我又满血复活了! 0 前言动态规划中最简单的东西-最长上升子序列 1 最长上升子序列我们就来举个栗子吧. 1 3 7 3 4 其中[1,3,4]是一个子序列 2 动态规划此题可以使用动态规划 其实我不想敷衍了事,但是我实在太困了…]]></content>
  </entry>
  <entry>
    <title><![CDATA[生日快乐]]></title>
    <url>%2F2019%2F01%2F17%2F%E7%94%9F%E6%97%A5%E5%BF%AB%E4%B9%90%2F</url>
    <content type="text"><![CDATA[明天生日… 终于有理由推更几天了[滑稽]]]></content>
  </entry>
  <entry>
    <title><![CDATA[杂谈dfs]]></title>
    <url>%2F2019%2F01%2F13%2F%E6%9D%82%E8%B0%88dfs%2F</url>
    <content type="text"><![CDATA[期末考试准备考崩 前言首先先说一下,我可不知道什么是快快编程 前置技能1.queue 概念一条道走到黑…(个人理解) 思路选择第i条随便找直到找到要找的….(还是个人理解,但是差不多就是这个意思) code12345678910111213141516171819void dfs(int x)&#123; if(x==n)//找到个数了 &#123; if(check())//如果正确 &#123; ans++;//答案+1 &#125; &#125; else &#123; for(int i=1;i&lt;=n;i++) &#123; b[i]=100; dfs(x+1);//枚举下一位 b[i]=0; &#125; &#125;&#125; The end]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-P1597-语句解析]]></title>
    <url>%2F2019%2F01%2F08%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1597-%E8%AF%AD%E5%8F%A5%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[这是一道简单的模拟，非常简单，可以利用c++文件输入输出的个性while(cin&gt;&gt;x).然后呢需要注意有字母赋值的可能性。一定要注意，而且这个数是个一位数，无需分割(个人认为分割就是普及-的题目)代码附上:1234567891011121314151617181920212223242526272829303132333435363738#include &lt;iostream&gt;using namespace std;int main() &#123; char f,d,e,g,z; int a=0,b=0,c=0; while(cin&gt;&gt;f) &#123; cin&gt;&gt;g&gt;&gt;d&gt;&gt;z&gt;&gt;e; if(z&gt;='0'&amp;&amp;z&lt;='9')&#123; z=z-'0'; if(f=='a')a=z; if(f=='b')b=z; if(f=='c')c=z; &#125; else if(z=='a') &#123; if(f=='a')a=a; if(f=='b')b=a; if(f=='c')c=a; &#125; else if(z=='b') &#123; if(f=='a')a=b; if(f=='b')b=b; if(f=='c')c=b; &#125; else if(z=='c') &#123; if(f=='a')a=c; if(f=='b')b=b; if(f=='c')c=c; &#125; &#125; cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;c;&#125; ~~第n次写题解竟然一次都没过~~]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>luogublog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[杂谈动态规划]]></title>
    <url>%2F2019%2F01%2F04%2F%E6%9D%82%E8%B0%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[动态规划是啥?能吃吗?QAQ 前置技能1.无 概念让我们看看一看大黄本上的解释:动态规划程序设计是对解最优化问题的一种途径，一种方法，而不是一种特殊的算法，不像前面所述的那些搜索或数值计算那样具有一个标准的数学表达式和明确清晰的解题方法。动态规划程序设计往往是针对一种最优化问题。由于各种问题的性质不同，确定最优解的条件也互不相同，因而动态规划的设计方法与对不同的问题有各具特色的解题方法，而不存在一种万能的动态规划算法可以解决各类最优化问题，因此，读者在学习时除了要对基本概念和方法，理解外，必须具体。问题具体分析处理，以丰富的想象力去建立模型，用创造性的技巧去解决。我们也可以通过对若干有代表性的问题的动态规划算法进行分析讨论，逐渐学会并掌握这一设计方法。以上的解释全部是来自大黄本(然后我不要脸的使用语音识字) 基础动态规划套路动态规划其实也是有一个套路的,只要你找到边界条件,转移方程基本上就可以解决了. 边界条件比较好理解,也比较好些,但是转移方程非常的不好想，因为转移方程控制着题目的难度. 转移方程列的方法是通过上一个推得这一个.这就是转移方程。 01背包概念给定n种物品和一个容量为C的背包物品i的重量是wi其价值为vi,每种有一个。01背包是学习背包的基础 实践1234567891011void dp()&#123; //bianjie for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=m;j++) &#123; //zhuanyi &#125; &#125;&#125; 转移方程大概就是这样的:1234if(a[i]&lt;=j)f[i][j] = max(b[i]+f[i-1][j-a[i]],f[i-1][j]);elsef[i][j] = f[i-1][j]; 完全背包(不好意思拖得时间有点久) 概念给定n种物品和一个容量为w的背包物品i的重量是wi其价值为vi,每种有无限个。 思路从不同的角度去考虑背包.与01背包非常相似,仅仅比01背包多一个for循环 code1234567891011void dp()&#123; //bianjie for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=m;j++) &#123; //zhuanyi &#125; &#125;&#125; 1.01背包 √2.完全背包 √3.多重背包 预计完工时间:2019.1.174.混合三种背包 预计完工时间:2019.1.175.二维费用背包 预计完工时间:2019.1.186.分组的背包 预计完工时间:2019.1.187.有依赖的背包 预计完工时间:2019.1.198.背包问题的方案总数 预计完工时间:2019.1.19 thanks for your watching! the end]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法统计]]></title>
    <url>%2F2018%2F12%2F25%2F%E7%AE%97%E6%B3%95%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[感觉自己好渺小 线性结构 9/3莫队前缀和数组 √栈 √队列 √块状链表,块状数组,分块st表,稀疏表差分 网络流 11/0最大流 3/0DinicSap有上下界的最大流最小割 5/0闭合图最小点权覆盖集最大点权覆盖集分数规划最大密度子图费用流 3/0最短路增广费用流zkw费用流最小费用可行流 基础算法 6/6模拟 √贪心 √递推 √递归 √枚举,暴力 √分治 √ 排序 9/8冒泡排序 √选择排序 √桶排 √插入排序 √归并排序 √快速排序 √希尔排序 √外部排序 查找算法 3/3二分答案 √顺序查找 √二分查找 √ 二分图 5/0最大匹配 3/0匈牙利算法一般图的最大匹配Konig定理带权二分图匹配稳定婚姻系统 其他技巧 18/2暴力数据结构高精 √博弈论 3/0Nim游戏博弈树Shannon开关游戏倍增离散化哈希，HASH 3/0ELFhashSDBMBKDR随机贪心,随机化快速傅里叶变换,DFT,FFT位运算,按位骗分 √NP问题构造快速数论变换NTT快速沃尔什变换FWT 字符串 9/0后缀自动机,SAM字典树,Trie树AC自动机KMP后缀数组,SA后缀树有限状态自动机哈夫曼,Huffman回文自动机PAMManacher算法 动态规划,动规,dp 15/4背包 √环型动规,环型dp数位动规,数位dp多维状态区间动规,区间dp子母树动态规划优化 7/3单调队列 √降低维度,降维优先队列 √矩阵加速,矩阵优化斜率优化状态压缩,状压 √四边形不等式树形插头dp 搜索 12/4广度优先搜索,BFS √深度优先搜索,DFS √剪枝 √记忆化搜索 √启发式搜索 6/0启发式迭代加深,IDA*Dancing Links爬山法模拟退火遗传A*算法迭代加深随机调整 数论,数学 37/2 图论 32/6 计算几何 9/0 树形结构 32/2 总统计 207/40完成率 19.32%]]></content>
  </entry>
  <entry>
    <title><![CDATA[圣诞节快乐]]></title>
    <url>%2F2018%2F12%2F25%2F%E5%9C%A3%E8%AF%9E%E8%8A%82%E5%BF%AB%E4%B9%90%2F</url>
    <content type="text"><![CDATA[圣诞礼物?不存在的… 圣诞节快乐!]]></content>
  </entry>
  <entry>
    <title><![CDATA[各类奇葩模板]]></title>
    <url>%2F2018%2F12%2F18%2F%E5%90%84%E7%B1%BB%E5%A5%87%E8%91%A9%E6%A8%A1%E6%9D%BF%2F</url>
    <content type="text"><![CDATA[各类模子,希望各位dalao赞助(￣▽￣)~*(｀・ω・´)以下为各类模板(持续更新) 快速幂1234567int qpow(long long x,long long y)&#123; if(y==1)return x%c; long long t=qpow(x,y/2); if(y%2&gt;0)return t*t*x%c; else return t*t%c;&#125; 并查集123456789101112131415161718192021222324252627282930int root(int x)//找根 &#123; if(p[x]&lt;0)return x;//如果找到根了 return p[x]=root(p[x]);//非常精巧边找根边将自己设为根的儿子 &#125;void Merge(int x,int y)//将x的和y合并 &#123; int u=root(x);//追溯到x的根 int v=root(y);//追溯到y的根 if(u!=v)//如果两人的根不相等 &#123; if(u&lt;v) &#123; p[u]=p[u]+p[v]; p[v]=u; &#125; else &#123; p[v]=p[v]+p[u]; p[u]=v; &#125; &#125; &#125;bool findg(int x,int y)//如果x和y属于同一个图 &#123; int u=root(x);//追溯到x的根 int v=root(y);//追溯到y的根 if(u==v)return true;//如果x和y属于同一个图 else return false;//否则返回不为同一个根 &#125; 线性筛素数1234567891011121314void prime(int n)&#123; for(int i=2;i&lt;=n;i++)ip[i]=1; for(int i=2;i&lt;=n;i++) &#123; if(ip[i]) &#123; for(int j=2*i;j&lt;=n;j=j+i) &#123; ip[j] = false; &#125; &#125; &#125;&#125;]]></content>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-P1111-修复公路]]></title>
    <url>%2F2018%2F12%2F16%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1111-%E4%BF%AE%E5%A4%8D%E5%85%AC%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[天啊撸，又双叒叕的来的还是我… LG-1111-修复公路&gt;_&lt;学完并查集大水题aua 题目描述思路并查集…. 题目大意一个图之间断开了，现在给你n,m.然后有m组,每组有x,y,t,x与y之间如果连接的话需要t分钟，问联通需要几分钟. 结构体先以时间从小到大排序,可以写一个结构体类似于….这样12345struct pef&#123; int x; int y; int m;&#125;; 然后其中x代表x,y代表y,m代表时间; sort判断函数1234bool cmp(pef x,pef y)&#123; return x.m&lt;y.m;&#125; 检查是否图为联通12345678910bool check()&#123; int t=0; for(int i=1;i&lt;=n;i++) &#123; if(p[i]&lt;0)t++; &#125; if(t==1)return true; else return false;&#125; 找到自己的祖宗…12345int root(int x)&#123; if(p[x]&lt;0)return x; return p[x]=root(p[x]);&#125; 并查集-并123456789101112131415161718void Merge(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v) &#123; if(u&lt;v) &#123; p[u]=p[u]+p[v]; p[v]=u; &#125; else &#123; p[v]=p[v]+p[u]; p[u]=v; &#125; &#125;&#125; 判断两人的祖宗是否相等1234567bool is(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v)return false; else return true;&#125; !有一点一定要注意… 那就是输出的是修路的最长的时间… 以上就是全部的思路,main中的代码.123456789101112131415161718192021222324main()&#123; 设p数组为-1; 输入n,m; 从1-m循环 &#123; 输入x,y,z; &#125; 从a+1-a+1+n以cmp函数规则排序; 从1-m循环 &#123; 如果(a[i].x与a[i].y为不同一祖宗(!is(a[i],x,a[i],y)) &#123; 合并(a[i].x,a[i].y); &#125; 如果(图已联通) &#123; 输出 最高时间; 退出程序; &#125; &#125; 输出 -1; 退出;&#125; 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495/*╭──╮╭╭╮╮╭──╮╭╮ ╭╮ ╭──╮╭──╮╭╮╭╮╭──╮│╭─╯│ ││╭╮│││ ││ │╭─╯│╭╮││╰╮││╭─╯│╰─╮│││││╰╯│││ ││ │╰─╮│╰╯││ │││╭╮╰─╮││╭╮││╭╮│││ ││ │╭─╯│╭╮││ │││││╭─╯││││││││││╰─╮│╰─╮││ │││││╰╮││╰╯│╰──╯╰╯╰╯╰╯╰╯╰──╯╰──╯╰╯ ╰╯╰╯╰╯╰╯╰──╯*/#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstring&gt;using namespace std;struct pef&#123; int x; int y; int m;&#125;;int p[100001];int root(int x)&#123; if(p[x]&lt;0)return x; return p[x]=root(p[x]);&#125;int n,m,ans=0;void Merge(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v) &#123; if(u&lt;v) &#123; p[u]=p[u]+p[v]; p[v]=u; &#125; else &#123; p[v]=p[v]+p[u]; p[u]=v; &#125; &#125;&#125;bool is(int x,int y)&#123; int u=root(x); int v=root(y); if(u!=v)return false; else return true;&#125;bool check()&#123; int t=0; for(int i=1;i&lt;=n;i++) &#123; if(p[i]&lt;0)t++; &#125; if(t==1)return true; else return false;&#125;pef a[100001];bool cmp(pef x,pef y)&#123; return x.m&lt;y.m;&#125;int main()&#123; memset(p,-1,400004); cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=m;i++) &#123; cin&gt;&gt;a[i].x&gt;&gt;a[i].y&gt;&gt;a[i].m; &#125; sort(a+1,a+1+m,cmp); for(int i=1;i&lt;=m;i++) &#123; int xa=a[i].x,ya=a[i].y; int money=a[i].m; if(!is(xa,ya)) &#123; ans=ans+money; Merge(xa,ya); &#125; if(check()) &#123; cout&lt;&lt;money; return 0; &#125; &#125; cout&lt;&lt;"-1";&#125;&#125; 此题可以顺带手撸掉模板最小生成树…bye~]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-P2058-海港]]></title>
    <url>%2F2018%2F12%2F14%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P2058-%E6%B5%B7%E6%B8%AF%2F</url>
    <content type="text"><![CDATA[LG - P2058 - 海港 题目这里 思路部分这道题乍一看是一道大难题大模拟 1 维护一个队列(不使用库函数) 叫做dl dl[i].ti意思是第i个人在什么时候到达 dl[i].ni意思是第i个人的国籍 2 输入国籍，定义pep,统计该国籍有没有人，如果没有那么ans++,并且pep[tmp]++; 3 由于给定条件保证数据递增,所以就保证此时的队列是一个单调递增的。然后定义e=0,这样从队头扫到元素时间与该此到达时间差小于86400（不等于）如果不满足则e++并且删掉一个改国籍的人,如果该国籍此时没有人那么ans–; 代码部分12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;using namespace std;struct node&#123; int ti,na;&#125;dl[400000];int ans=0;int pep[400000];int main()&#123; int n; cin&gt;&gt;n; int t,k,c=0; int e=1; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;t&gt;&gt;k; int tmp; for(int i=k;i&gt;=1;i--) &#123; cin&gt;&gt;tmp; dl[c+1].ti=t; dl[++c].na=tmp; if(!pep[tmp]) &#123; ans++; &#125; pep[tmp]++; &#125; while(t-dl[e].ti&gt;=86400) &#123; if(!--pep[dl[e++].na]) ans--; &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; 题解终于写完了]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flag?]]></title>
    <url>%2F2018%2F12%2F09%2Fflag%2F</url>
    <content type="text"><![CDATA[11.推出v0.3 未达成2.Ac 200道题 √ ff]]></content>
      <tags>
        <tag>flag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客更新日志]]></title>
    <url>%2F2018%2F12%2F08%2F%E5%8D%9A%E5%AE%A2%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97%2F</url>
    <content type="text"><![CDATA[V0.2.8 2019.1.7 (+)h1类型触摸时放大 (+)cookie-night (change)功能下移 V0.2.7 2019.1.5 (change)文章圆角 (change)按钮圆角 (change)回到顶部与菜单并行 V0.2.5 2019.1.5 (+)滚动框样式 V0.2.1 2018.12.20 (+)鼠标样式 V0.2.0 2018.12.18 (+)评论功能 (+)站内搜索功能 (+)背景样式 (+)增加加载条 V0.1.0 基础]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-AT2281-Sum of Three Integers]]></title>
    <url>%2F2018%2F12%2F06%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-AT2281-Sum-of-Three-Integers%2F</url>
    <content type="text"><![CDATA[1234 嘿嘿嘿,做红题的感觉真不错 题目大意这道题就是求a+b+c=s有几种等式成立的可能性 0&lt;=a,b,c&lt;=k 给定s,k; 求出方案数. 思路暴力n^3对,看到是红题就认为暴力n^3能过，然后就凉了… 下面是代码 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;int main()&#123; int k,s; cin&gt;&gt;k&gt;&gt;s; int ans=0; for(int i=0;i&lt;=k;i++) &#123; for(int j=0;j&lt;=k;j++) &#123; for(int ij=0;ij&lt;=k;ij++) &#123; if(i+j+ij==s) &#123; ans++; &#125; &#125; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125; $n^2$算法em… 可以写两个循环求出第3个值。如果第三个值符合要求，则答案++,下面是AC代码 12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int main()&#123; int k,s; cin&gt;&gt;k&gt;&gt;s; int ans=0; for(int i=0;i&lt;=k;i++) &#123; for(int j=0;j&lt;=k;j++) &#123; int ij=s-i-j; if(ij&lt;=k &amp;&amp; ij &gt;=0)ans++; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[题解-NOIP2018T4对称二叉树]]></title>
    <url>%2F2018%2F12%2F01%2F%E9%A2%98%E8%A7%A3-NOIP2018T4%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[2333 题目应该都知道 代码12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#define ull unsigned long longusing namespace std;int ans=1,n,v[1000005],l[1000005],r[10000005]; struct node&#123; int d; int t; int w; node(int da,int ta,int tw) &#123; d=da; t=ta; w=tw; &#125; bool operator==(const node&amp;b)const&#123;return d==b.d&amp;&amp;w==b.w&amp;&amp;t==b.t;&#125;&#125;; ull id(int x,int *l1,int *r1,ull h)&#123;if(l1[x]&gt;0) h=id(l1[x],l1,r1,h*1009+1); if(r1[x]&gt;0) h=id(r1[x],l1,r1,h*1009+2);return h*1009+v[x];&#125;node dfs(int x)&#123; if(x&lt;0)return node(0,0,0); node ll=dfs(l[x]); node rr=dfs(r[x]); if(ll==rr&amp;&amp;l[x]&gt;0&amp;&amp;id(l[x],l,r,0)==id(r[x],r,l,0)) ans=max(ans,2*ll.t+1); return node(max(ll.d,rr.d)+1,ll.t+rr.t+1,ll.w+rr.w+v[x]);&#125;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++)cin&gt;&gt;v[i]; for(int i=1;i&lt;=n;i++)cin&gt;&gt;l[i]&gt;&gt;r[i]; dfs(1); cout&lt;&lt;ans; return 0; &#125;]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-P1449-后缀表达式]]></title>
    <url>%2F2018%2F09%2F27%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1449-%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[转移来自 cnblogs 0 前言这里空空如也 2 思路就当不存在 代码有注释,懒得打… 3 代码`cpp #include //string #include #include //栈的头文件using namespace std;char g[10000];int main(){ cin&gt;&gt;g; int a=0; stack &lt;int&gt; s; bool flag=false; for(int i=0;;i++) { if(g[i]==&apos;@&apos;)break; if(g[i]&lt;&apos;0&apos; || g[i]&gt;&apos;9&apos;) { if(g[i]==&apos;.&apos;)//如果a&gt;0 s.push(a); else { if(g[i]==&apos;*&apos;) { int stop=s.top(); s.pop(); stop=stop*s.top(); s.pop(); s.push(stop); } if(g[i]==&apos;/&apos;) { int stop=s.top(); s.pop(); stop=s.top()/stop; s.pop(); s.push(stop); } if(g[i]==&apos;-&apos;) { int stop=s.top(); s.pop(); stop=s.top()-stop; s.pop(); s.push(stop); } if(g[i]==&apos;+&apos;) { int stop=s.top(); s.pop(); stop=stop+s.top(); s.pop(); s.push(stop); } } a=0; } else { a=a*10; a=a+g[i]-&apos;0&apos;; } } if(s.empty())s.push(a); cout&lt;&lt;s.top(); } -The end-]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>cnblogs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[洛谷题解-P1025-数的划分]]></title>
    <url>%2F2018%2F09%2F20%2F%E6%B4%9B%E8%B0%B7%E9%A2%98%E8%A7%A3-P1025-%E6%95%B0%E7%9A%84%E5%88%92%E5%88%86%2F</url>
    <content type="text"><![CDATA[转移来自 cnblogs 0 前言啊呀呀终于有时间写博客啦,题解呢,只有在这里才能水一水，所以以后要抓紧时间水啦(今天太困了就不水了) 1 题目部分懒得复制粘贴了,点这里跳转. 2 题解2.1 简单的思路dfs. 选数.从第一个数开始枚举,一直枚举到第n个,每个从1个开始放,到放n个.然后判断和是不是等于m就可以啦 2.2 一个严重的问题 - 判断重复这个problem让人很讨厌.因为你的判断中不能直接÷3，也不能判断每两个数是否相等,因为1 1 1就是一个反例. 那么,问题来了，怎么判断重复呢? 方法就是让这些数必须为升序,举个栗子: 1 1 5 1 5 1 5 1 1 因为1 5 1不是升序排除,151排除,511排除则只剩下1 1 5 解决问题.（想了1year） 2.3 代码部分思路想完了那就上代码吧: #include using namespace std;int n,m;int a[100000];int b[100000];int vis[100000];int c;void dfs(int x,int last){ if(x==n+1) { int all=0; for(int i=1;i&lt;=x;i++)all=all+b[i]; if(all!=m)return ; for(int i=1;i&lt;x-1;i++) { for(int j=i+1;j&lt;x;j++) { if(b[j]&lt;b[i])return ; } } c++; return ; } for(int i=1;i&lt;=m;i++) { b[x]=i; vis[i]=1; dfs(x+1,i); vis[i]=0; b[x]=0; } }int main(){ cin&gt;&gt;m&gt;&gt;n; c=0; dfs(1,0); cout&lt;&lt;c&lt;&lt;endl; return 0; } 那么我们就提交吧,神奇,只得了40分其他TLE. 2.3 改进好吧,只能剪枝了.如何剪枝呢反正我不知道 首先让人先想到的是 下一个数必定要大于这个数，也就是说a[x+1]&gt;a[x],所以for可以从a[x]一直到n这就是第一个剪枝，好吧那我们把代码写下来吧: // luogu-judger-enable-o2// luogu-judger-enable-o2// luogu-judger-enable-o2 #include using namespace std;int n,m;int a[100000];int b[100000];int vis[100000];int c;void dfs(int x,int last){ if(x==n+1) { int all=0; for(int i=1;i&lt;=x;i++)all=all+b[i]; if(all!=m)return ; for(int i=1;i&lt;x-1;i++) { for(int j=i+1;j&lt;x;j++) { if(b[j]&lt;b[i])return ; } } c++; return ; } for(int i=b[x-1];i&lt;=m;i++) { b[x]=i; vis[i]=1; dfs(x+1,i); vis[i]=0; b[x]=0; } }int main(){ cin&gt;&gt;m&gt;&gt;n; c=0; b[0]=1; dfs(1,0); cout&lt;&lt;c&lt;&lt;endl; return 0; }提交~多对了一个点，那好吧我们还得继续改进 2.4 继续改进好吧。我们得继续剪枝,我们做一个统计就是all,all要最后算,我们是不是可以先算呢.也就是说在x==n+1的时候我们只用判断all是不是等于m,就少了一个for 第二我们在后面增加all,加判断all&gt;m?如果大于了肯定就不是了,下面就上AC代码 2.5 终于通过了123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;iostream&gt;using namespace std;int n,m;int b[100000];int vis[100000];int c;int all=0;void dfs(int x,int last)&#123; if(x==n+1) &#123; if(all!=m)return ; c++; return ; &#125; for(int i=b[x-1];i+all&lt;=m;i++) &#123; b[x]=i; vis[i]=1; all=all+i; if(all&gt;m)return ; dfs(x+1,i); vis[i]=0; all=all-i; b[x]=0; &#125;&#125;int main()&#123; cin&gt;&gt;m&gt;&gt;n; c=0; b[0]=1; dfs(1,0); cout&lt;&lt;c&lt;&lt;endl; return 0;&#125; bula bula bula ac 100 -The end-]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>cnblogs</tag>
      </tags>
  </entry>
</search>
